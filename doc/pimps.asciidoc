== Pimps ==

Many dynamic languages support the ability to extend existing classes by adding new methods to them.
You may think of categories in Objective-C and Groovy, or *open classes* in Ruby.

This is generally implemented by providing *meta-classes*. When some piece of code adds a method
`foo` to, say, `SomeClass`, then all instances of `SomeClass` get that new `foo` method. While very
convenient, such an open system may lead to well-known conflicts between the added methods.

Golo provides a more limited but explicit way to add methods to existing classes in the form of
**pimps**.

NOTE: The verb *"to pimp"* http://en.wikipedia.org/wiki/Pimp#Etymology:[comes from the French
*"pimper"*] which means *"dressing elegantly and charmingly"*. It is a positive expression, and in
no way a reference to degrading activities. *"Pimping"* has also entered the mainstream culture in
TV shows, hip-hop lyrics and advertising. Golo does not use `pimp` in an offending way. Instead, it
highlights the fact that it can decorate existing classes to make them look nicer.

=== Wrapping a string with a function ===

Let us motivate the value of pimps by starting with the following example. Suppose that we would
like a function to wrap a string with a left and right string. We could do that in Golo as follows:

[source,text]
----
function wrap = |left, str, right| -> left + str + right

# (...)
let str = wrap("(", "foo", ")")
println(str) # prints "(abc)"
----

Defining functions for such tasks makes perfect sense, but what if we could just add the `wrap`
method to all instances of `java.lang.String` instead?

=== Pimping classes ===

Defining a pimp is a matter of adding a `pimp` block in a module:

[source,text]
----
module foo

pimp java.lang.String { 
  function wrap = |this, left, right| -> left + this + right
}

function wrapped = -> "abc": wrap("(", ")")
----

More specifically:

1. a `pimp` definition is made on a fully-qualified class name, and
2. a pimp function takes the receiver object as its first argument, followed by optional arguments,
   and
3. there can be as many pimp functions as you want, and
4. there can be as many pimps as you want.

It is a good convention to name the receiver `this`, but you are free to call it differently.

Also, pimp functions can take variable-arity arguments, as in:

[source,text]
----
pimp java.lang.String {

  function concatWith = |this, args...| {
    var result = this
    foreach(arg in atoList(args)) {
      result = result + arg
    }
    return result
  }
}

# (...)
function varargs = -> "a": concatWith("b", "c", "d")
----

It should be noted that pimps work with class hierarchies too. The following example adds a pimp to
`java.util.Collection`, which also adds it to concrete subclasses such as `java.util.LinkedList`:

[source,text]
----
pimp java.util.Collection {
  function plop = |this| -> "plop!"
}

# (...)
function plop_in_a_list = -> java.util.LinkedList(): plop()
----

=== Pimp scopes, reusable pimps ===

By default, a pimp is only visible from its defining module. **Pimps are clear and explicit as they
only affect the instances from which you have decided to make them visible.**

It is advised to place reusable pimps in separate module definitions. Then, a module that needs such
pimps can make them available through imports.

Suppose that you want to define pimps for dealing with URLs from strings. You could define a
`string-url-pimps.golo` module source as follows:

[source,text]
----
module my.StringUrlPimps

import java.net

pimp java.lang.String {

  function toURL = |this| -> URL(this)

  function httpGet = |this| {
    # Open the URL, get a connection, grab the body as a string, etc
    # (...)
  }

  # (...)
}
----

Then, a module willing to take advantage of those pimps can simply import their defining module:

[source,text]
----
module my.App

import my.StringUrlPimps

function googPageBody = -> "http://www.google.com/": httpGet()
----

TIP: As a matter of style, we suggest that your module names end with `Pimps`. Because importing a
module imports **all** of its pimp definitions, we suggest that you modularize them with *fine
taste* (for what it means).

=== Standard pimps ===

Golo comes with a set of pre-defined pimps.

CAUTION: Until we have a tool to extract the documentation from Golo source files, their documentation will
simply be the inclusion of that file content.

[source,text]
----
include::../src/main/golo/standard-pimps.golo[]
----

